<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="echo.sp.app.dao.UserAblityDAO">
    <insert id="addAblity" parameterType="map">
    	INSERT INTO T_USER_ABLITY 
		(
			ABLI_ID,
			USER_ID,
			SECTOR_ID,
			SECTOR_TYPE,
			ABLI_TITLE,
			ABLI_DESC,
			ABLI_ASK_PAID,
			ABLI_ADDR,
			ABLI_LONGITUDE,
			ABLI_LATITUDE,
			ABLI_ICON1,
			ABLI_ICON2,
			ABLI_ICON3,
			ABLI_ICON4,
			ABLI_BUY_COUNT,
			ABLI_STATUS,
			ABLI_CREATE_TIME,
			ABLI_LAST_UPDATE 
		)
		VALUES
		(
			#{ABLI_ID},
			#{USER_ID},
			#{SECTOR_ID},
			#{SECTOR_TYPE},
			#{ABLI_TITLE},
			#{ABLI_DESC},
			#{ABLI_ASK_PAID,jdbcType=NUMERIC},
			#{ABLI_ADDR},
			#{ABLI_LONGITUDE,jdbcType=NUMERIC},
			#{ABLI_LATITUDE,jdbcType=NUMERIC},
			#{ABLI_ICON1},
			#{ABLI_ICON2},
			#{ABLI_ICON3},
			#{ABLI_ICON4},
			#{ABLI_BUY_COUNT,jdbcType=NUMERIC},
			#{ABLI_STATUS},
			#{ABLI_CREATE_TIME},
			#{ABLI_LAST_UPDATE} 
		)
    </insert>
    <update id="updateAblity" parameterType="map">  
    	UPDATE
			T_USER_ABLITY 
		SET
			ABLI_TITLE = #{ABLI_TITLE},
			ABLI_DESC=#{ABLI_DESC},
			ABLI_ASK_PAID=#{ABLI_ASK_PAID,jdbcType=NUMERIC},
			ABLI_ADDR=#{ABLI_ADDR},
			ABLI_LONGITUDE=#{ABLI_LONGITUDE,jdbcType=NUMERIC},
			ABLI_LATITUDE=#{ABLI_LATITUDE,jdbcType=NUMERIC},
			ABLI_ICON1=#{ABLI_ICON1},
			ABLI_ICON2=#{ABLI_ICON2},
			ABLI_ICON3=#{ABLI_ICON3},
			ABLI_ICON4=#{ABLI_ICON4},
			ABLI_LAST_UPDATE=#{ABLI_LAST_UPDATE}
		WHERE ABLI_ID = #{ABLI_ID}
    </update> 
    <update id="deleteAblity" parameterType="map"> 
    	UPDATE
			T_USER_ABLITY 
		SET
			ABLI_LAST_UPDATE=#{ABLI_LAST_UPDATE},
			ABLI_STATUS = '40'
		WHERE ABLI_ID = #{ABLI_ID}
    </update>
    <select id="searchAblityById" parameterType="map" resultType="Map">
     	SELECT A.*,B.USER_NAME,B.USER_ICON 
     	FROM T_USER_ABLITY A, T_USERS B
     	WHERE A.ABLI_ID = #{ABLI_ID}
     	AND A.USER_ID = B.USER_ID
    </select>
    <select id="getAbliComments" parameterType="map" resultType="Map">
     	SELECT A.*,B.USER_NAME,B.USER_ICON 
     	FROM T_USER_ABLITY_COMMENTS A, T_USERS B
     	WHERE A.ABLI_ID = #{ABLI_ID}
     	AND A.USER_ID = B.USER_ID
    </select>
    <select id="searchAblityList" parameterType="map" resultType="Map">
          SELECT A.*,B.USER_NAME,B.USER_ICON,B.CANT_CODE,
          SQRT(POWER(#{LONGITUDE, jdbcType=NUMERIC}-A.ABLI_LONGITUDE,2)+POWER(#{LATITUDE, jdbcType=NUMERIC}-A.ABLI_LATITUDE,2)) * 140000 DIST
          FROM T_USER_ABLITY A, T_USERS B
          WHERE A.ABLI_STATUS = '20'
          AND A.USER_ID = B.USER_ID
          <if test="USER_ID != null and USER_ID != '' ">  
          		AND A.USER_ID = #{USER_ID}  
          		AND B.USER_ID = #{USER_ID}
    	  </if> 
    	  <if test="SECTOR_ID != null and SECTOR_ID != '' ">  
          		AND A.SECTOR_ID = #{SECTOR_ID} 
    	  </if>
    	  <if test="SECTOR_TYPE != null and SECTOR_TYPE != '' ">  
          		AND A.SECTOR_TYPE = #{SECTOR_TYPE} 
    	  </if>
    	  <if test="ABLI_TITLE != null and ABLI_TITLE != '' ">  
          		AND A.ABLI_TITLE LIKE CONCAT(CONCAT('%', #{ABLI_TITLE, jdbcType=VARCHAR}),'%') 
    	  </if>
    	  <choose>
   	      	<when test="DISTANCE == '10'">
   	      		AND SQRT(POWER(#{LONGITUDE, jdbcType=NUMERIC}-A.ABLI_LONGITUDE,2)+POWER(#{LATITUDE, jdbcType=NUMERIC}-A.ABLI_LATITUDE,2)) * 140000 <![CDATA[<=20000]]> 
				AND B.CANT_CODE = #{CANT_CODE}
			</when>
			<when test="DISTANCE == '20'">
				AND B.CANT_CODE = #{CANT_CODE}
			</when>
			<otherwise>
				AND 1 = 1
			</otherwise>
		  </choose>
    </select>
    <select id="getCommentById" parameterType="map" resultType="Map">
     	SELECT A.*,B.USER_NAME,B.USER_ICON 
     	FROM T_USER_ABLITY_COMMENTS A, T_USERS B
     	WHERE A.ABLI_ID = #{ABLI_ID}
     	AND A.USER_ID = B.USER_ID
     	AND A.USER_ID = #{USER_ID}
     	AND B.USER_ID = #{USER_ID}
     	AND A.ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </select>
    <delete id="delComment" parameterType="map">  
        DELETE FROM T_USER_ABLITY_COMMENTS 
        WHERE USER_ID = #{USER_ID}
        AND ABLI_ID = #{ABLI_ID}
        AND ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </delete> 
    <insert id="addComment" parameterType="map">
    	INSERT INTO T_USER_ABLITY_COMMENTS
    	(ABLI_ID,ABLI_ORDER_ID,USER_ID,TOTAL_POINT,COMENT_TITLE,COMMENT_DESC,COMMENT_TIME,REPLY)
        VALUES
        (#{ABLI_ID},#{ABLI_ORDER_ID},#{USER_ID},#{TOTAL_POINT,jdbcType=NUMERIC},#{COMENT_TITLE},#{COMMENT_DESC},#{COMMENT_TIME},#{REPLY})
    </insert>
    <insert id="addBuyAbility" parameterType="map">
    	INSERT INTO T_ABLITY_ORDERS 
			(
				ABLI_ORDER_ID,
				ABLI_ID,
				USER_ID,
				ORDER_TYPE,
				STATUS,
				PAY_TYPE,
				TOTAL_PAY,
				DEADLINE,
				PAY_TIME 
			)
		VALUES
			(
				#{ABLI_ORDER_ID},
				#{ABLI_ID},
				#{USER_ID},
				#{ORDER_TYPE},
				#{STATUS},
				#{PAY_TYPE},
				#{TOTAL_PAY,jdbcType=NUMERIC},
				#{DEADLINE},
				#{PAY_TIME} 
			)
    </insert>
    <select id="getAbliOrderById" parameterType="map" resultType="Map">
     	SELECT A.*,B.USER_NAME,B.USER_ICON 
     	FROM T_ABLITY_ORDERS A, T_USERS B
     	WHERE A.ABLI_ORDER_ID = #{ABLI_ORDER_ID}
     	AND A.USER_ID = B.USER_ID
    </select>
    <update id="updateDeclineContract" parameterType="map"> 
    	UPDATE
			T_ABLITY_ORDERS 
		SET
			STATUS = '20',
			BACK_TIME = #{BACK_TIME},
			BACK_REASON = #{BACK_REASON}
		WHERE ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </update>
    <update id="updateConfirmContract" parameterType="map"> 
    	UPDATE
			T_ABLITY_ORDERS 
		SET
			STATUS = '30',
			START_TIME = #{START_TIME}
		WHERE ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </update>
    <update id="updateDoneAbility" parameterType="map"> 
    	UPDATE
			T_ABLITY_ORDERS 
		SET
			STATUS = '40',
			DELI_TIME = #{DELI_TIME},
			DONE_ICON1 = #{DONE_ICON1},
			DONE_ICON2 = #{DONE_ICON2},
			DONE_ICON3 = #{DONE_ICON3},
			DONE_ICON4 = #{DONE_ICON4}
		WHERE ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </update>
    <update id="updateConfirmDone" parameterType="map"> 
    	UPDATE
			T_ABLITY_ORDERS 
		SET
			STATUS = '50',
			CONFIRM_TIME = #{CONFIRM_TIME}
		WHERE ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </update>
    <update id="updateConfirmUnDone" parameterType="map"> 
    	UPDATE
			T_ABLITY_ORDERS 
		SET
			STATUS = '60',
			DECLINE_TIME = #{DECLINE_TIME}
		WHERE ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </update>
    <update id="deleteOrder" parameterType="map"> 
    	UPDATE
			T_ABLITY_ORDERS 
		SET
			STATUS = '70',
			DEL_TIME = #{DEL_TIME}
		WHERE ABLI_ORDER_ID = #{ABLI_ORDER_ID}
    </update>
    <select id="getAbliOrders" parameterType="map" resultType="Map">
          SELECT A.*,C.USER_NAME,C.USER_ICON
          FROM T_ABLITY_ORDERS A, T_USER_ABLITY B, T_USERS C
          WHERE A.USER_ID = #{USER_ID}   
          AND A.ABLI_ID = B.ABLI_ID
          AND B.USER_ID = C.USER_ID
          <if test="STATUS != null and STATUS != '' ">  
          		AND A.STATUS = #{STATUS}
    	  </if>
    </select>
    <select id="getAbliBuyOrders" parameterType="map" resultType="Map">
          SELECT B.*,C.USER_NAME,C.USER_ICON
          FROM T_USER_ABLITY A, T_ABLITY_ORDERS B, T_USERS C
          WHERE A.USER_ID = #{USER_ID} 
          <if test="ABLI_ID != null and ABLI_ID != '' ">  
          		AND A.ABLI_ID = #{ABLI_ID} 
    	  </if>
    	  AND A.ABLI_ID = B.ABLI_ID
    	  AND B.USER_ID = C.USER_ID
    </select>
    <update id="updateAbliBuyCount" parameterType="map"> 
    	UPDATE
			T_USER_ABLITY 
		SET
			ABLI_BUY_COUNT = ABLI_BUY_COUNT + 1
		WHERE ABLI_ID = #{ABLI_ID}
    </update>
    <select id="getAbliCommentInfo" parameterType="map" resultType="Map">
          SELECT ABLI_COMMMENT,ABLI_POINT
          FROM T_USER_ABLITY
          WHERE ABLI_ID = #{ABLI_ID}
    </select>
    <update id="updateAbliCommentInfo" parameterType="map"> 
    	UPDATE
			T_USER_ABLITY 
		SET
			ABLI_COMMMENT = #{ABLI_COMMMENT,jdbcType=NUMERIC},
			ABLI_POINT = #{ABLI_POINT,jdbcType=NUMERIC}
		WHERE ABLI_ID = #{ABLI_ID}
    </update>
    <select id="getUnProcessOrders" parameterType="map" resultType="Map">
          SELECT * FROM T_ABLITY_ORDERS
          WHERE STATUS NOT IN ('20','70','80')
          AND DEADLINE > #{CURR_DATE} 
    </select>
    <select id="getAbilityUserId" parameterType="map" resultType="String">
          SELECT A.USER_ID 
          FROM T_USER_ABLITY A,T_ABLITY_ORDERS B
          WHERE B.ABLI_ORDER_ID = #{ABLI_ORDER_ID}
          AND A.ABLI_ID = B.ABLI_ID
    </select>
</mapper>	